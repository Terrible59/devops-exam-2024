// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: rides.sql

package db

import (
	"context"

	"github.com/gofrs/uuid"
	"github.com/guregu/null"
)

const getUserRides = `-- name: GetUserRides :many
SELECT c.id, c.model, c.registration_number, c.fuel_level, c.is_reserve, r.created_at
FROM rides AS r
INNER JOIN cars AS c
ON r.car_id = c.id
WHERE user_id = $1
`

type GetUserRidesRow struct {
	ID                 uuid.UUID   `json:"id"`
	Model              null.String `json:"model"`
	RegistrationNumber null.String `json:"registration_number"`
	FuelLevel          null.Int    `json:"fuel_level"`
	IsReserve          bool        `json:"is_reserve"`
	CreatedAt          null.Time   `json:"created_at"`
}

func (q *Queries) GetUserRides(ctx context.Context, userID uuid.UUID) ([]GetUserRidesRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserRides, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserRidesRow
	for rows.Next() {
		var i GetUserRidesRow
		if err := rows.Scan(
			&i.ID,
			&i.Model,
			&i.RegistrationNumber,
			&i.FuelLevel,
			&i.IsReserve,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
